name: CI - Check Changes

on:
  push:
    branches:
      - '*'  # Run on all branches
  pull_request:
    branches:
      - '*'  # Run on all branches

jobs:
  # Quick syntax and linting checks
  quick-checks:
    name: Quick Syntax & Lint Checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for better checks
    
    - name: Verify no code will be modified
      run: |
        echo "CI will only check code, never modify it"
        git status
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Check Python syntax
      run: |
        echo "Checking Python syntax..."
        for file in *.py; do
          if [ -f "$file" ]; then
            python -m py_compile "$file" && echo "✓ $file syntax OK"
          fi
        done
    
    - name: Check Python imports (without external dependencies)
      run: |
        python -c "
        try:
            import sys
            sys.path.insert(0, '.')
            # Try to import modules that don't require external libs
            print('✓ Basic Python environment OK')
        except Exception as e:
            print(f'✗ Import error: {e}')
            sys.exit(1)
        "
      continue-on-error: true
    
    - name: Check frontend dependencies
      working-directory: frontend
      run: |
        echo "Checking frontend package.json..."
        if [ -f package.json ]; then
          echo "✓ package.json exists"
        else
          echo "✗ package.json not found"
          exit 1
        fi
    
    - name: Validate JSON files
      run: |
        echo "Validating JSON files..."
        if command -v python &> /dev/null; then
          python -m json.tool frontend/package.json > /dev/null && echo "✓ package.json valid"
        fi

  # Python backend tests
  python-backend:
    name: Python Backend Tests
    runs-on: ubuntu-latest
    needs: quick-checks
    strategy:
      matrix:
        python-version: ['3.8', '3.9']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake
        sudo apt-get install -y libopenblas-dev liblapack-dev libx11-dev libgtk-3-dev
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools wheel
        # Try to install dependencies, continue on error for optional ones
        pip install opencv-python fer tensorflow numpy Pillow matplotlib scikit-learn python-dotenv flask flask-cors imutils || true
        # dlib is optional for tests since we mock it
        pip install dlib || echo "Warning: dlib installation failed, but tests may still pass"
      continue-on-error: true
    
    - name: Verify source files unchanged
      run: |
        echo "Ensuring CI doesn't modify source files..."
        git diff --exit-code || (echo "ERROR: Files were modified!" && git diff && exit 1)
    
    - name: Run Python tests
      run: |
        echo "Running Python tests..."
        python -m unittest tests.test_app -v || python -m pytest tests/test_app.py -v
      env:
        PYTHONPATH: ${{ github.workspace }}
      continue-on-error: false
    
    - name: Check for syntax errors in all Python files
      run: |
        echo "Checking for syntax errors..."
        python -m py_compile app.py config.py utils.py logger.py main_secure.py
        echo "✓ All Python files compile successfully"

  # React frontend build
  react-frontend:
    name: React Frontend Build
    runs-on: ubuntu-latest
    needs: quick-checks
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: frontend
      run: |
        npm ci
        echo "✓ Frontend dependencies installed"
    
    - name: Build frontend (temporary, will be cleaned)
      working-directory: frontend
      run: |
        echo "Building frontend (temporary build, will not be committed)..."
        npm run build || echo "Warning: Frontend build had issues, but checking syntax..."
        echo "Note: Build artifacts in frontend/build/ will not be committed"
      continue-on-error: true
    
    - name: Clean up frontend build artifacts
      working-directory: frontend
      run: |
        echo "Cleaning up temporary build files..."
        rm -rf build/ 2>/dev/null || true
    
    - name: Check frontend files exist
      working-directory: frontend
      run: |
        echo "Checking frontend structure..."
        ls -la src/
        if [ -f src/App.js ] && [ -f src/index.js ]; then
          echo "✓ Essential frontend files exist"
        else
          echo "✗ Missing essential frontend files"
          exit 1
        fi

  # Summary job
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [python-backend, react-frontend]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Final verification - no code changes
      run: |
        echo "================================"
        echo "Final Verification"
        echo "================================"
        echo "Checking that CI didn't modify any source files..."
        git diff --exit-code || (echo "⚠ WARNING: Source files were modified!" && git status && exit 1)
        echo "✓ All source files remain unchanged"
        echo "✓ CI only checked code, did not modify it"
    
    - name: Display results
      run: |
        echo "================================"
        echo "CI Check Summary"
        echo "================================"
        echo "✓ All checks completed"
        echo "✓ No source files were modified"
        echo ""
        echo "Branches checked:"
        echo "  - Current branch: ${{ github.ref }}"
        echo "  - Event: ${{ github.event_name }}"
        echo ""
        echo "To see detailed results, check the individual job outputs above."

